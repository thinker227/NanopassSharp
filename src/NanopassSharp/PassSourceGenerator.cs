using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using NanopassSharp.Functional;
using NanopassSharp.Models;

namespace NanopassSharp;

internal static class PassSourceGenerator {

	public readonly record struct ModifiedTypeResult(
		string Source, TypeName TypeName);
	public static Result<ModifiedTypeResult> GetModifiedTypeSource(RecordDeclarationSyntax baseSyntax, INamedTypeSymbol baseType, PassModel pass, ModificationPassModel mod) {
		var typeName = GetTypeName(pass, mod, baseType);

		string source =
$$"""
// <auto-generated />

namespace {{typeName.Namespace}};

public sealed record {{typeName.Name}} {
	
}

""";

		return new ModifiedTypeResult(source, GetTypeName(pass, mod, baseType));
	}

	public readonly record struct TypeName(string Name, string Namespace) {
		public string FullName { get; } = $"{Namespace}.{Name}";
	}
	public static TypeName GetTypeName(PassModel pass, ModificationPassModel mod, INamedTypeSymbol baseType) {
		string @namespace = baseType.GetFullNamespace();
		string typeName = mod.TypeName ?? pass.Name;
		return new(typeName, @namespace);
	}

}
